module nat

import bool
import pair

  
||| A data type to represent the natural numbers.  We use a lower case
||| "n" in the name to distinguish our nat type from Idris's Nat type
data nat = O | S nat

{-
Here are some examples of some objects (named values) of type nat.
-}

-- zero
z: nat
z = O

-- one
o: nat
o = S O

-- two
t: nat
t = S (S O)

-- three
r: nat
r = S t

-- four
f: nat
f = S r

-- five
g: nat
g = S f

-- six
i: nat
i = S g

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n


||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n


||| given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = (S (addp (mkPair n m)))



||| given a pair of natural numbers, return its sum
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = (addp (mkPair m (multp (mkPair n m))))

factp: nat -> nat
factp O = (S O)
factp (S n) = multp (mkPair (S n) (factp n))

subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair m O) = m
subp (mkPair (S m) (S n)) = (subp (mkPair n m))


--expp - given a pair of natural numbers, (x, n), return the value of x raised to the nth power
expp: pair nat nat -> nat
expp (mkPair O n) = O
expp (mkPair m O) = (S O)
expp (mkPair m (S n)) = (multp (mkPair m (exp (mkPair m n))))


-- lep - given a pair of natural numbers, (a, b), return true if a is less than or equal to b, otherwise return false
lep: pair nat nat -> bool
lep (mkPair O m) = true
lep (mkPair (S n) O) = false
lep (mkPair (S n) (S m)) = (lep (mkPair n m))


--eqp - given a pair of natural numbers, (a, b), return true if a is equal to be, otherwise return false
eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair O (S n)) = false
eqp (mkPair (S n) O) = false
eqp (mkPair (S n) (S m)) = (eqp (mkPair n m))


-- gtp - given a pair of natural numbers, (a, b), return true if a is greater than b, otherwise return false
gtp: pair nat nat -> bool
gtp (mkPair O O) = false
gtp (mkPair O n) = false
gtp (mkPair (S n) O) = true
gtp (mkPair (S n) (S m)) = (gtp (mkPair n m))


-- gep - given a pair of natural numbers, (a, b), return true of a is greater than or equal to b
gep: pair nat nat -> bool
gep (mkPair O O) = true
gep (mkPair O (S n)) = false
gep (mkPair n O) = true
gep (mkPair (S n) (S m)) = (gep (mkPair n m))


--  ltp - given a pair of natural numbers, (a, b), return true if a is less than b
ltp: pair nat nat -> bool
ltp (mkPair O O) = false
ltp (mkPair O (S n)) = true
ltp (mkPair n O) = false
ltp (mkPair (S n) (S m)) = (ltp (mkPair n m))


-- code to compute a fibonacci number
fibp: nat -> nat
fibp (S O) = (S O)
fibp (S (S O)) = (S O)
fibp (S (S n)) = addp (mkPair (fibp (S n)) (fibp n))
